/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.cafe.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Image;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.SwingConstants;
import poly.cafe.dao.impl.BillDAO;
import poly.cafe.dao.impl.BillDAOImpl;
import poly.cafe.dao.impl.CardDAO;
import poly.cafe.dao.impl.CardDAOImpl;
import poly.cafe.entity.Bill;
import poly.cafe.entity.Card;
import poly.cafe.util.XAuth;
import poly.cafe.util.XDialog;

/**
 *
 * @author admin
 */
public class SalesJDialog extends javax.swing.JDialog implements SalesController {

    /**
     * Creates new form SalesJDialog
     *
     * @param parent
     * @param modal
     */
    public SalesJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCards = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Thẻ định danh");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlCards.setLayout(new java.awt.GridLayout(0, 6, 5, 5));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCards, javax.swing.GroupLayout.DEFAULT_SIZE, 943, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCards, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(449, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.open();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            SalesJDialog dialog = new SalesJDialog(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlCards;
    // End of variables declaration//GEN-END:variables

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.loadCards(); // tải và hiển thị các thẻ lên cửa sổ bán hàng
    }

    @Override
    public void showBillJDialog(int cardId) {
        BillDAO dao = new BillDAOImpl();
        Bill bill = dao.findServicingByCardId(cardId); // tải bill đang phục vụ của thẻ
        // Nếu hóa đơn tồn tại và không phải của nhân viên hiện tại → chặn sửa
        if (bill != null && !bill.getUsername().equals(XAuth.user.getUsername())) {
            XDialog.alert("Bạn không có quyền chỉnh sửa hóa đơn này!\nĐơn này đang do nhân viên khác phụ trách.");
            return;
        }

        // Nếu chưa có hóa đơn, tạo mới và gán người tạo là nhân viên hiện tại
        if (bill == null) {
            bill = new Bill();
            bill.setCardId(cardId);
            bill.setCheckin(new Date());
            bill.setStatus(Bill.Status.Servicing.ordinal());
            bill.setUsername(XAuth.user.getUsername());
            dao.insert(bill); // lưu vào database
            bill = dao.findServicingByCardId(cardId); // load lại hóa đơn sau khi insert
        }

        BillJDialog dialog = new BillJDialog((Frame) this.getOwner(), true);
        dialog.setBill(bill);
        dialog.setVisible(true); // Cần khai báo vào BillJDialog @Setter Bill bill
    }

    private void loadCards() {// tải và hiển thị các thẻ lên cửa sổ bán hàng
        CardDAO dao = new CardDAOImpl();
        List<Card> cards = dao.findAll();
        pnlCards.removeAll();
        cards.forEach(card -> pnlCards.add(this.createButton(card)));
        pnlCards.revalidate();
        pnlCards.repaint();
    }

    private JButton createButton(Card card) { // tạo Jbutton cho thẻ
//        JButton btnCard = new JButton();
//        btnCard.setText(String.format("Card #%d", card.getId()));
//        btnCard.setPreferredSize(new Dimension(0, 80));
//        btnCard.setEnabled(card.getStatus() == 0);
//        btnCard.setBackground(btnCard.isEnabled() ? Color.GREEN : Color.GRAY);
//        btnCard.setActionCommand(String.valueOf(card.getId()));
//        btnCard.addActionListener((ActionEvent e) -> {
//        int cardId = Integer.parseInt(e.getActionCommand());
//        SalesJDialog.this.showBillJDialog(cardId);
//        });
//        return btnCard;
        int width = 120;
        int height = 80;

        // Load và scale ảnh nền
        ImageIcon originalIcon = new ImageIcon(getClass().getResource("/poly/cafe/icons/coffee-shop.jpg"));
        Image scaledImage = originalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(scaledImage);

        // Tạo nút
        JButton btnCard = new JButton("Card #" + card.getId());
        btnCard.setIcon(scaledIcon);

        // Căn giữa chữ và hình ảnh
        btnCard.setHorizontalTextPosition(SwingConstants.CENTER);
        btnCard.setVerticalTextPosition(SwingConstants.CENTER);

        // Font và màu chữ
        btnCard.setFont(new Font("Arial", Font.BOLD, 16));
        btnCard.setForeground(Color.BLACK);

        // Trạng thái bật/tắt tùy theo status
        boolean isEnabled = card.getStatus() == 0;
        btnCard.setEnabled(isEnabled);

        // Nếu không bật, đổi màu chữ mờ hơn để phân biệt rõ
        if (!isEnabled) {
            btnCard.setForeground(Color.LIGHT_GRAY);
        }

        // Không viền, không focus
        btnCard.setContentAreaFilled(false);
        btnCard.setBorderPainted(false);
        btnCard.setFocusPainted(false);

        // Kích thước cố định
        btnCard.setPreferredSize(new Dimension(width, height));

        // Gán hành động nếu nút được bật
        if (isEnabled) {
            btnCard.setActionCommand(String.valueOf(card.getId()));
            btnCard.addActionListener(e -> {
                int cardId = Integer.parseInt(e.getActionCommand());
                SalesJDialog.this.showBillJDialog(cardId);
            });
        }

        return btnCard;

    }
}
